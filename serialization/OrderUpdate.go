// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package serialization

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type OrderUpdate struct {
	_tab flatbuffers.Table
}

func GetRootAsOrderUpdate(buf []byte, offset flatbuffers.UOffsetT) *OrderUpdate {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OrderUpdate{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *OrderUpdate) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *OrderUpdate) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *OrderUpdate) Timestamp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *OrderUpdate) MutateTimestamp(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *OrderUpdate) OrderId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func OrderUpdateStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func OrderUpdateAddTimestamp(builder *flatbuffers.Builder, timestamp int64) {
	builder.PrependInt64Slot(0, timestamp, 0)
}
func OrderUpdateAddOrderId(builder *flatbuffers.Builder, orderId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(orderId), 0)
}
func OrderUpdateEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
