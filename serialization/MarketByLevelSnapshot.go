// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package serialization

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MarketByLevelSnapshot struct {
	_tab flatbuffers.Table
}

func GetRootAsMarketByLevelSnapshot(buf []byte, offset flatbuffers.UOffsetT) *MarketByLevelSnapshot {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MarketByLevelSnapshot{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *MarketByLevelSnapshot) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MarketByLevelSnapshot) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MarketByLevelSnapshot) Sequence() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MarketByLevelSnapshot) MutateSequence(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *MarketByLevelSnapshot) Symbol() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MarketByLevelSnapshot) Bids(obj *PriceLevel, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 16
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *MarketByLevelSnapshot) BidsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MarketByLevelSnapshot) Asks(obj *PriceLevel, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 16
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *MarketByLevelSnapshot) AsksLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func MarketByLevelSnapshotStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func MarketByLevelSnapshotAddSequence(builder *flatbuffers.Builder, sequence int64) {
	builder.PrependInt64Slot(0, sequence, 0)
}
func MarketByLevelSnapshotAddSymbol(builder *flatbuffers.Builder, symbol flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(symbol), 0)
}
func MarketByLevelSnapshotAddBids(builder *flatbuffers.Builder, bids flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(bids), 0)
}
func MarketByLevelSnapshotStartBidsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(16, numElems, 8)
}
func MarketByLevelSnapshotAddAsks(builder *flatbuffers.Builder, asks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(asks), 0)
}
func MarketByLevelSnapshotStartAsksVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(16, numElems, 8)
}
func MarketByLevelSnapshotEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
