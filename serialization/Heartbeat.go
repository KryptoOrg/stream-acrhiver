// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package serialization

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Heartbeat struct {
	_tab flatbuffers.Table
}

func GetRootAsHeartbeat(buf []byte, offset flatbuffers.UOffsetT) *Heartbeat {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Heartbeat{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Heartbeat) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Heartbeat) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Heartbeat) Timestamp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Heartbeat) MutateTimestamp(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *Heartbeat) ProductId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Heartbeat) Sequence() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Heartbeat) MutateSequence(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *Heartbeat) LastTradeId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Heartbeat) MutateLastTradeId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func HeartbeatStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func HeartbeatAddTimestamp(builder *flatbuffers.Builder, timestamp int64) {
	builder.PrependInt64Slot(0, timestamp, 0)
}
func HeartbeatAddProductId(builder *flatbuffers.Builder, productId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(productId), 0)
}
func HeartbeatAddSequence(builder *flatbuffers.Builder, sequence int64) {
	builder.PrependInt64Slot(2, sequence, 0)
}
func HeartbeatAddLastTradeId(builder *flatbuffers.Builder, lastTradeId int64) {
	builder.PrependInt64Slot(3, lastTradeId, 0)
}
func HeartbeatEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
